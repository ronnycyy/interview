/**
 * 给定一个整型数组arr，代表数值不同的纸牌排成一条线, 玩家A和玩家B依次拿走每张纸牌。

  规定:
    1. 玩家A先拿，玩家B后拿
    2. 每个玩家每次只能拿走最左或最右的纸牌
    3. 玩家A和玩家B都绝顶聪明

  请返回最后获胜者的分数。
*/

function win(arr) {
  if (!arr || arr.length === 0) {
    return 0;
  }
  console.log('\n🚀🚀先手起步🚀🚀');
  const first = f(arr, 0, arr.length - 1);
  console.log('\n🚀🚀后手起步🚀🚀');
  const second = g(arr, 0, arr.length - 1);

  console.log('=================🔥结果==================');
  console.log(first > second ? '先手赢了🎉' : '后手赢了🎉');

  return Math.max(first, second);
}

// 返回: 在arr[L..R]上先手, 获得的最好分数
// 🌰例子:
// 传入[100], 先手选走100, 返回100
// 传入[100,3], 先手选走100, 后手选走3, 返回100
// 传入[2,100,6], 先手选走2, 后手选走100, 先手选走6，返回2+6=8
function f(arr, L, R) {
  console.log(arr.slice(L, R + 1) + `先`);
  // 你是先手，现在是你选。

  if (L === R) {
    // 如果只剩一张牌，先手直接拿走
    return arr[L];
  }

  // 不止一张牌

  // 先手的第一种选择:`拿走最左侧的牌`, 最终分数=左牌分数+我在[L+1,R]上后手获得的最好分数 (我在[L+1,R]上后手,意味着现在[L+1,R]上对方先选)
  // 左牌分数+后续分数
  // 把g看成普通的函数，本体只有先手一个人，只是在g里它不能主动，只能被迫接收对方留下的结果。
  const p1 = arr[L] + g(arr, L + 1, R);
  // 先手的第二种选择:`拿走最右侧的牌`, 最终分数=右牌分数+我在[L,R-1]上后手获得的最好分数 (我在[L+1,R]上后手,意味着现在[L+1,R]上对方先选)
  // 右牌分数+后续分数
  const p2 = arr[R] + g(arr, L, R - 1);
  // 选最大的
  return Math.max(p1, p2);
}

// 返回: 在arr[L..R]上后手, 获得的最好分数 (先手留给你一个情况，你被动接受，然后全力以赴去算)
// 🌟得出两个信息:
// 1. 先手先选，那么[L..R]跟你没有关系，先手选完的 [L+1,R]或[L,R-1]才跟你有关系 
// 2. 先手绝顶聪明, 那么你能赢的唯一情况就是: 先手怎么选都输。
// 🌰例子:
// 传入[100], 先手选走100, 后手没有得到数, 返回0
// 传入[100,3], 先手选走100, 后手选走3, 返回3
// 传入[2,100,6], 先手选走2, 后手选走100, 先手选走6，返回100
function g(arr, L, R) {
  console.log(arr.slice(L, R + 1) + `后`);
  // 注意⚠️⚠️ 你是后手，现在不是你选!!

  if (L === R) {
    // 先手选走唯一的一张牌，后手没有得到数，返回0。
    return 0;
  }

  // 不止一张牌
  // 你是后手，现在你不能选。先手可以选，他有两种选择:

  // 1.先手选走 arr[L]，让后手 (就是我) 只能在 [L+1,R] 上`先手`得到最好分数
  // p1 是: 对方挑走了 arr[L]，我在剩下的 [L+1,R] 得到的最优分数
  const p1 = f(arr, L + 1, R);
  // 2.先手选走 arr[R]，让后手 (就是我) 只能在 [L,R-1] 上`先手`得到最好分数
  // p2 是: 对方挑走了 arr[R]，我在剩下的 [L,R-1] 得到的最优分数
  const p2 = f(arr, L, R - 1);

  // 重点来了: 先手绝顶聪明，他会算出: 选哪边使得`你在剩下的范围得到最优分`比较小，给你留一个小的，所以返回两者的 min。
  // 🔥感受到被动了吗？
  return Math.min(p1, p2);

  // 那是不是后手一定输？
  // 不是!!!  如果这两种可能性都大于先手获得的分，后手就赢了!!   
  // 比如: 我在[2,100,6]上后手，先手的两种选择是: `给我留 [2,100]` 或 `给我留[100,6]`，给我留的这两种情况我都能拿到 100, 我作为后手, 赢了。 
  // 也就是说，后手能赢的情况是: 先手选哪边都会输。
}

win([2, 100, 6]);

// [2,100,6] 是天意，先手是诸葛亮，后手是司马懿。诸葛亮绝顶聪明，但是不管怎么选，最终都会输。
